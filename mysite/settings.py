"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 将该文件夹添加到根目录下，自定义app都放入该文件件
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bnjew_s3w=q^_24t9$8$6n^ipve(&8zm#z%r=jjo%!-u2gbg=a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '192.192.121.121']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',         # admin管理后台站点
    'django.contrib.auth',          # 身份认证系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',      # 会话框架
    'django.contrib.messages',      # 消息框架
    'django.contrib.staticfiles',   # 静态文件管理框架

    # 提高模板系统对人类的友好性，有助于为数据展示添加“人文关怀”.
    # 在模板中使用{% load humanize %}标签
    'django.contrib.humanize',

    # 第三方应用程序
    'bootstrap4',

    # 我的应用程序
    'home',
    'blogs',
    'colleges',
    # 'users',
    # 'polls',

    # xadmin
    # 'xadmin',
    # 'crispy_forms',
    # 'reversion',    # 可选

    # celery + redis
    'djcelery',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',     # session会话
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

# 模板系统相关配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 待搜索模板的路径列表，设置为每个app下的templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # 是否在已安装App中搜索templates源文件
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # 若在模板中使用{{ MEDIA_URL }}，必须添加
                'django.template.context_processors.media',
            ],
        },
    },
]

# Django使用WSGI协议与外部进行通信
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# 一定要添加这两行
import pymysql
pymysql.install_as_MySQLdb()

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }

    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysiteDB',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# USE_I18N=True 时，才会生效
LANGUAGE_CODE = 'en-us'
# LANGUAGE_CODE = 'zh-hans'       # 指定admin页面语言，简体中文

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'     # 指定时区

# 此标签允许在模板中指定可翻译文本。要启用它，请将USE_I18N设置为True，
# 然后加载{％ load i18n ％}
USE_I18N = True

# 此标签提供对模板的本地化控制，只需要使用{％ load l10n ％}。
# 通常将USE_L10N设置为True，以便本地化默认处于活动状态
USE_L10N = True

# 此标签对模板中的时区进行控制。指定是否使用指定的时区（TIME_ZONE）的时间
# True：使用指定时区时间
# False：使用本地时间
# 若TIME_ZONE = Asia/Shanghai， 那么务必同时将USE_TZ = False
# 只需要使用{％ load tz }，但通常还会将USE_TZ设置为True，以便默认情况下转换为本地时间。
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# 应用位于STATIC_ROOT中的静态文件时使用的网址
STATIC_URL = '/files/static/'

# DEBUG=False时，即上线时，Django项目里的静态文件会无法使用
# 当运行 python manage.py collectstatic 的时候
# STATIC_ROOT 文件夹 是用来将所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来
# 把这些文件放到一起是为了用apache等部署的时候更方便
STATIC_ROOT = os.path.join(BASE_DIR, 'files/static')

# 其它 存放静态文件的文件夹，可以用来存放项目中公用的静态文件，里面不能包含 STATIC_ROOT
# 如果不想用 STATICFILES_DIRS 可以不用，都放在 app 里的 static_collected 中也可以
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'files/static_other'),
    # '/var/www/static_common/'
)

# 指向MEDIA_ROOT所指定的media文件，用来管理保存的文件。该URL设置为非空值时，必须以斜杠“/”结束
MEDIA_URL = '/files/media/'
# media文件夹用来存放用户上传的文件。必须与STATIC_ROOT不同
MEDIA_ROOT = os.path.join(BASE_DIR, 'files/media')


# 这个是默认设置，Django 默认会在 STATICFILES_DIRS中的文件夹 和 各app下的static文件夹中找文件
# 注意有先后顺序，找到了就不再继续找了
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder"
)

# django-bootstrap的设置
# 在此处添加jquery，不需要在html中再包含jquery了
BOOTSTRAP4 = {
    'include_jquery': True,
}


# 发邮件
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'lipf0627@163.com'
EMAIL_HOST_PASSWORD = 'lipengyun0627'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# 代码错误通知的人的邮件地址列表，DEBUG=False才会发送
ADMINS = [('Leo', 'lipf0627@163.com'), ]


# 配置缓存
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 300,
    }
}

# 指定自定义用户模型
# 格式为 "<django_app名>.<model名>"
AUTH_USER_MODEL = 'home.User'


# Celery settings
import djcelery
djcelery.setup_loader()

# celery中间人 redis://redis服务器所在的ip地址:地址/数据库号
BROKER_URL = 'redis://127.0.0.1:6379/0'
# celery结果返回，可用于跟踪结果
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
# celery内容等消息的格式设置
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# celery时区设置，使用TIME_ZONE
CELERY_TIMEZONE = TIME_ZONE


from datetime import timedelta

# 定时任务
CELERYBEAT_SCHEDULE = {
    'add-every-20-seconds': {
        'task': 'home.tasks.test_beat',          # 任务名
        'schedule': timedelta(seconds=20),   # 每2s执行一次该任务
        'args': (2, 3)
    },

    'add-every-5-seconds': {
        'task': 'colleges.tasks.add_student',          # 任务名
        'schedule': timedelta(seconds=5),   # 每2s执行一次该任务
        'args': ()
    }
}
